package com.aero.o2o.web.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.aero.o2o.model.BasePojo;
import com.aero.o2o.model.Category;
import com.aero.o2o.model.JSONPojo;
import com.aero.o2o.model.O2OResult;
import com.aero.o2o.model.Product;
import com.aero.o2o.model.QueryParam;
import com.aero.o2o.model.Shop;
import com.aero.o2o.model.Topic;
import com.aero.o2o.service.ProductService;
import com.aero.o2o.service.UserService;
import com.aero.o2o.util.O2OConstant;
import com.aero.o2o.util.json.PojoJSONUtil;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

@Controller("ProductController")
public class ProductController  extends BaseController{

	@Autowired
	private ProductService productService;

	@Autowired
	private UserService userService;
	
	@RequestMapping(value = "firstClass", method = RequestMethod.GET,produces="text/plain;charset=UTF-8")
	public ModelAndView firstClass(HttpServletRequest request){
		
		List<BasePojo> list = o2oDao.queryForList("Product.queryFirstCategory", null);
		JSONArray classArray = PojoJSONUtil.list2Array(list, new JSONPojo() {
			@Override
			public JSONObject pojo2JSON(BasePojo pojo) {
				return PojoJSONUtil.category2JSON((Category)pojo);
			}
		});
		O2OResult result = new O2OResult();
		result.put("classArray", classArray);
		return new ModelAndView("jsonView").addObject(O2OConstant.JSON,result);
	}

	@RequestMapping(value = "secondClass", method = RequestMethod.GET,produces="text/plain;charset=UTF-8")
	public ModelAndView secondClass(HttpServletRequest request){
		Integer classId = Integer.valueOf(fetchStringParameterNotNull("classId", request));
		QueryParam qp = new QueryParam();
		qp.put("categoryno", classId);
		List<BasePojo> list = o2oDao.queryForList("Product.querySecondCategory", qp);
		JSONArray classArray = PojoJSONUtil.list2Array(list, new JSONPojo() {
			@Override
			public JSONObject pojo2JSON(BasePojo pojo) {
				return PojoJSONUtil.category2JSON((Category)pojo);
			}
		});
		O2OResult result = new O2OResult();
		result.put("classArray", classArray);
		return new ModelAndView("jsonView").addObject(O2OConstant.JSON,result);
	}

	@RequestMapping(value = "secondClassDetail", method = RequestMethod.GET,produces="text/plain;charset=UTF-8")
	public ModelAndView secondClassDetail(HttpServletRequest request){
		Integer classId = Integer.valueOf(fetchStringParameterNotNull("classId", request));
		Integer pageIndex = Integer.valueOf(fetchStringParameterNotNull("pageIndex", request));
		Integer pageSize = Integer.valueOf(fetchStringParameterNotNull("pageSize", request));
		QueryParam qp = new QueryParam();
		qp.put("categoryId", classId);
		qp.setPage(pageIndex, pageSize);
		List<BasePojo> list = o2oDao.queryListPage("Product.queryByCategory", qp);
		JSONArray productsArray = PojoJSONUtil.list2Array(list, new JSONPojo() {
			@Override
			public JSONObject pojo2JSON(BasePojo pojo) {
				return PojoJSONUtil.product2List((Product)pojo);
			}
		});
		O2OResult result = new O2OResult();
		result.put("productsArray", productsArray);
		result.put("end",qp.get("end"));
		return new ModelAndView("jsonView").addObject(O2OConstant.JSON,result);
	}

	
	@RequestMapping(value = "recommend", method = RequestMethod.GET,produces="text/plain;charset=UTF-8")
	public ModelAndView recommend(HttpServletRequest request){
		List<BasePojo> list = o2oDao.queryForList("Product.queryRecommend", null);
		JSONArray productsArray = PojoJSONUtil.list2Array(list, new JSONPojo() {
			@Override
			public JSONObject pojo2JSON(BasePojo pojo) {
				return PojoJSONUtil.product2List((Product)pojo);
			}
		});
		O2OResult result = new O2OResult();
		result.put("productsArray", productsArray);
		return new ModelAndView("jsonView").addObject(O2OConstant.JSON,result);
	}
	

	@RequestMapping(value = "hotSearch", method = RequestMethod.GET,produces="text/plain;charset=UTF-8")
	public ModelAndView hotSearch(HttpServletRequest request){
		O2OResult result = new O2OResult();
		result.put("key", "美食,优惠,巧克力");
		return new ModelAndView("jsonView").addObject(O2OConstant.JSON,result);
	}

	@RequestMapping(value = "search", method = RequestMethod.GET,produces="text/plain;charset=UTF-8")
	public ModelAndView search(HttpServletRequest request){
		String key = fetchStringParameterNotNull("key", request);
		Integer type = Integer.valueOf(fetchStringParameterNotNull("type", request));
		QueryParam qp = new QueryParam();
		qp.put("key", key);
		O2OResult result = new O2OResult();
		switch (type) {
		case 1:
			List<BasePojo> list = o2oDao.queryForList("Product.search", qp);
			JSONArray productsArray = PojoJSONUtil.list2Array(list, new JSONPojo() {
				@Override
				public JSONObject pojo2JSON(BasePojo pojo) {
					return PojoJSONUtil.product2List((Product)pojo);
				}
			});
			result.put("productsArray", productsArray);
			break;
		case 2:
			List<BasePojo> merchants = o2oDao.queryForList("Shop.search", qp);
			JSONArray merchantArray = PojoJSONUtil.list2Array(merchants, new JSONPojo() {
				@Override
				public JSONObject pojo2JSON(BasePojo pojo) {
					return PojoJSONUtil.product2List((Product)pojo);
				}
			});
			result.put("merchantArray", merchantArray);
			break;
		}
		return new ModelAndView("jsonView").addObject(O2OConstant.JSON,result);
	}
	
	@RequestMapping(value = "productDetail", method = RequestMethod.GET,produces="text/plain;charset=UTF-8")
	public ModelAndView productDetail(HttpServletRequest request){
		O2OResult result = new O2OResult();
		Integer productId = Integer.valueOf(fetchStringParameterNotNull("productId", request));
		Product product = productService.queryDetail(productId);
		result.put("product", PojoJSONUtil.product2Detail(product));
		return new ModelAndView("jsonView").addObject(O2OConstant.JSON,result);
	}

	
	@RequestMapping(value = "queryProductFromShop", method = RequestMethod.GET,produces="text/plain;charset=UTF-8")
	public ModelAndView queryProductFromShop(HttpServletRequest request){
		O2OResult result = new O2OResult();
		String shopId = request.getParameter("shopId");
		Integer pageIndex = Integer.valueOf(fetchStringParameterNotNull("pageIndex", request));
		Integer pageSize = Integer.valueOf(fetchStringParameterNotNull("pageSize", request));
		QueryParam qp = new QueryParam();
		qp.setPage(pageIndex, pageSize);
		if(shopId==null||"".equals(shopId.trim())){
			Integer poiId = Integer.valueOf(fetchStringParameterNotNull("poiId",request));
			qp.put("poiId",poiId);
		}else{
			qp.put("supplierId",Integer.valueOf(shopId));
		}
		List<BasePojo> list = o2oDao.queryListPage("Product.queryByShop", qp);
		JSONArray products = PojoJSONUtil.list2Array(list, new JSONPojo() {
			@Override
			public JSONObject pojo2JSON(BasePojo pojo) {
				return PojoJSONUtil.product2List((Product)pojo);
			}
		});
		result.put("end", qp.get("end"));
		result.put("products", products);
		return new ModelAndView("jsonView").addObject(O2OConstant.JSON,result);
	}
}
